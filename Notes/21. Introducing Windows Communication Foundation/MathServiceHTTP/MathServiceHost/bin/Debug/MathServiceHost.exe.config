<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <system.serviceModel>
    <services>
      <service name="MathServiceLibrary.MyMathService">        
        <host>
          <baseAddresses>
            <add baseAddress="http://localhost:8080/MyMathService"/>
            <add baseAddress="net.tcp://localhost:8099/MyMathService"/>
          </baseAddresses>
        </host>
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <serviceMetadata httpGetEnabled="true"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
</configuration>

<!--
In the world of WCF, the term endpoint represents the address, binding, and contract rolled together in a nice, tidy package. In XML, an 
endpoint is expressed using the <endpoint> element and the address,  binding, and contract elements

<system.serviceModel>
  <services>
    <service name="MathServiceLibrary.MyMathService">             QUALIFIED NAME OF SERVICE TYPE
      <endpoint address="http://localhost:8080/MyMathService"     ADDRESS TO ACCESS THE SERVICE
                binding="basicHttpBinding"                        TYPE OF BINDING TO USE
                contract="MathServiceLibrary.IMyMathContract">    QUALIFIED NAME OF SERVICE CONTRACT
      </endpoint>
    </service>
  </services>
</system.serviceModel>
_____________________________________________________________________________________________________________________________

It is a better practice to define the addresses in base address
<service name="MathServiceLibrary.MyMathService">             QUALIFIED NAME OF SERVICE TYPE
  <endpoint address=""                                        ADDRESS TO ACCESS THE SERVICE PULLED FROM BASEADDRESS
            binding="basicHttpBinding"                        TYPE OF BINDING TO USE
            contract="MathServiceLibrary.IMyMathContract">    QUALIFIED NAME OF SERVICE CONTRACT
  </endpoint>
  <host>
    <baseAddresses>
      <add baseAddress="http://localhost:8080/MyMathService"/>
    </baseAddresses>
  </host>
</service>
_____________________________________________________________________________________________________________________________

Metadata Exchange

The MEX behavior (which is disabled by default) will intercept any metadata requests sent through HTTP GET. You must enable MEX if you 
want to allow svcutil.exe or Visual Studio to automate the creation of the required client-side proxy *.config file. Enabling MEX is a 
matter of tweaking the host’s *.config file with the proper settings (or authoring the corresponding C# code). First, you must add a new 
<endpoint> just for MEX. Second, you need to define a WCF behavior to allow HTTP GET access. Third, you need to associate this behavior by 
name to your service using the behaviorConfiguration attribute on the opening <service> element. Finally, you need to add a <host> element 
to define the base address of this service (MEX will look here to figure out the locations of the types to describe).
  <system.serviceModel>
    <services>
      <service name="MathServiceLibrary.MyMathService" behaviorConfiguration="MyMathServiceMEXBehaviour">   ADDED BEHAVIOUR CONFIG
        .... 
        <endpoint address="mex"                                                                             END POINT FOR MEX (NOTE MEX AS ADDRESS)
                  binding="mexHttpBinding" 
                  contract="IMetadataExchange">
        </endpoint>
        
        <host>
          <baseAddresses>                                                                                   BASE ADDRESS FOR MEX
            <add baseAddress="http://localhost:8080/MyMathService"/>
          </baseAddresses>
        </host>
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>                                                                                    ADDED BEHAVIOUR TO ENABLE MEX
        <behavior name="MyMathServiceMEXBehaviour">
          <serviceMetadata httpGetEnabled="true"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>
_____________________________________________________________________________________________________________________________

Exposing a Single WCF Service Using Multiple Bindings
Remove all the endpoints and just add base addresses. (.NET4+)

<system.serviceModel>
  <services>
    <service name = "MagicEightBallServiceLib.MagicEightBallService" >
    <host>
      <baseAddresses>
        <add baseAddress = "http://localhost:8080/MagicEightBallService"/>
        <add baseAddress = "net.tcp://localhost:8099/MagicEightBallService"/>
      </baseAddresses>
    </host>
    </service>
  </services>
</system.serviceModel>
_____________________________________________________________________________________________________________________________

Changing Settings for a WCF Binding

<system.serviceModel>

  <bindings>
    <basicHttpBinding>
      <binding name="MyHttpBinding" openTimeout="00:00:30"></binding>   TO CHANGE THE SETTINGS OF DEFAULT BINDINGS, OMMIT THE NAME ATTRIBUTE
    </basicHttpBinding>      
  </bindings>
  <services>
    <service name="MathServiceLibrary.MyMathService" behaviorConfiguration="MyMathServiceMEXBehaviour">
        <endpoint address="" 
                  binding="basicHttpBinding" 
                  bindingConfiguration="MyHttpBinding"
                  contract="MathServiceLibrary.IMyMathContract">
        </endpoint>
      </service>
    </services>
</system.serviceModel>
_____________________________________________________________________________________________________________________________

Leveraging the Default MEX Behavior Configuration

<system.serviceModel>
  ...
  <behaviors>
    <serviceBehaviors>
      <behavior>
        <serviceMetadata httpGetEnabled = "true"/>
      </behavior>
    </serviceBehaviors>
  </behaviors>
</system.serviceModel>

-->
